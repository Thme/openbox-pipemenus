#!/bin/bash
#ConnMenu the pipemenu interface to connman written in bash for openbox
#wifi_dc85de828967_hidden_managed_ieee8021x
f_helpdoc() {
cat <<EOF
   ConnMenu: An openbox pipe-menu control for connman the "Connection Manager"
   Usage: connmenu [options OR connman commands ]
   Pipe Options
      --main-menu           Print XML for generating the main pipe-menu.

      --essids              Pipe-menu XML for listing networks  
                            list (submenu within the main pipe-menu).

      --tech                Print XML for generating on/off toggles list for
                            compatible networking devices (submenu within the 
                            main menu).
   Command Line Options
      <conmann connect ..>  Executes "connman connect" to the target service
                            and open passkey dialog(Xdialog). This is used to 
                            invoke an passkey window dialog when connecting to
                            a new secure network for the first time.
 
      --help                Print this help text.
EOF
exit 0
}
#################################################################################
f_grep_pass() { grep -q "Passphrase" $X/settings ;}
#################################################################################
f_profiled() {
	for X in /var/lib/connman/* ; do
		if [[ -f $X/settings ]] && f_grep_pass ; then
			grep "\[wifi_" $X/settings | sed 's/[^a-z0-9_]//g'
		fi
	done
}
#################################################################################
f_all_services() { connmanctl services | awk '{print $NF}' ;}
#################################################################################
f_essids() { 
	f_scan() { connmanctl scan wifi ;}
	TEST_LIST="$(connmanctl services)"
	ERROR=0
	if [[ f_scan && -n $TEST_LIST ]] ; then
		connmanctl services | awk '{$(NF--)=""; print}' 
	else
		ERROR=1
	fi 
}
#f_essids 
#exit 0
#################################################################################
f_sec_services() {
	f_all_services | grep "_psk"
	f_all_services | grep "_wep" 
}
#################################################################################
f_unsec_services() { f_all_services | grep "_none" ;}
#################################################################################
f_exec_xdialog() {
if [[ $2 == connect ]] ; then 
	PASS=$(Xdialog --inputbox "Enter WEP/WPA/WPA2 Passkey" 6 40 2>&1)
	INPUT="$@ $PASS"
	exec $INPUT  
	EXIT=$?
	if (( EXIT != 0 )) ; then
		Xdialog --msgbox "The passkey you entered was incorrect" 6 40 2&>1
	fi
	exit 0
fi
}
#################################################################################
f_admin_opts() {
	echo -e "<openbox_pipe_menu>"
	echo -e "\t<item label=\"Restart (ConnMan daemon)\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>gksu systemctl restart connman.service</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "\t<item label=\"Stop\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>'gksu systemctl stop connman.service'</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "\t<item label=\"Start\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>gksu systemctl start connman.service</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "\t<item label=\"Disable\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>gksu systemctl disable connman.service</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "\t<item label=\"Enable\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>'gksu systemctl enable connman.service'</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "</openbox_pipe_menu>"
}
#################################################################################
f_technologies() {
	ON_OFF=( $(connmanctl technologies | grep "Powered" | awk '{print $NF}') )
	NAME=( $(connmanctl technologies | grep "Name" | awk '{print $NF}') )
	TYPE=( $(connmanctl technologies | grep "Type" | awk '{print $NF}') )
#For those 
	echo "<openbox_pipe_menu>"
	N=0
	for X in "${NAME[@]}" ; do
		[[ ${ON_OFF[N]} == False ]] && 	echo -e "\t<item label=\"Turn on $X\">"
		[[ ${ON_OFF[N]} == True ]]  &&	echo -e "\t<item label=\"Turn off $X\">"
     												echo -e "\t\t<action name=\"Execute\">"
		[[ ${ON_OFF[N]} == False ]] &&	echo -e "\t\t\t<command>"connmanctl enable ${TYPE[N]}"</command>"
		[[ ${ON_OFF[N]} == True ]]  && 	echo -e "\t\t\t<command>"connmanctl disable ${TYPE[N]}"</command>"
													echo -e "\t\t</action>"
													echo -e "\t</item>"
		(( N++ ))
	done
   echo -e "\t<menu execute=\"connmenu --admin\" id=\"adminpipe\" label=\"Admin Options\"/>"
	echo "</openbox_pipe_menu>"
exit 0
}
################################################################################
#Creates list on networks to connect with via 
f_networks() {
	#######Populate all main arrays for filtering and final output. ########
	oldIFS="$IFS"
	IFS=$'\n'
		ESSIDS=( $(f_essids) )
		SERVICES=( $(f_all_services) )
#		NEW_NET=( $(for X in "${SERVICES[@]}" ; do printf "connmanctl connect $X\n" ; done) ) 
		SECURE=( $(f_sec_services) )
		UNSECURE=( $(f_unsec_services) )
	   PROFILED=( $(f_profiled) )

		#Populate comparison array 
		TMP_LIST=( $(for X in "${UNSECURE[@]}" ; do printf "$X\n" ; done ) )
		TMP_LIST+=( $(for X in "${PROFILED[@]}" ; do printf "$X\n" ; done) )
		NET_LIST=( $(for list in "${TMP_LIST[@]}" ; do printf "connmanctl connect $list\n" ; done | sort -u) ) 
	IFS="$oldIFS"
	unset TMP_LIST[@]
	#Get state of the wifi card via connmanctl for the toggle on/off menu button.
	STATE=( $(connmanctl state | awk '{print $NF}') )systemctl restart connman.service
	
	N=0
	for X in "${ESSIDS[@]}" ; do
		if [[ $X == '<hidden>' ]] ; then		
			unset SERVICES[N]
			unset ESSIDS[N]
		fi	
	#	ESSIDS[N]="$(printf "$X\n" | sed -e 's/[<>]//g')"
		(( N++ ))
	done
	
	N=0
	for X in "${SERVICES[@]}" ; do
		A=""
		for Y in "${PROFILED[@]}" ; do
			if [[ $X == $Y ]] ; then
				NET_SERVICES[N]="$X"
				NET[N]="connmanctl connect $X"
				LABEL[N]="${ESSIDS[N]}"
				A="#"
			#	break
			fi
		done
		for Y in "${SECURE[@]}" ; do
			if [[ $X == $Y && -z $A ]] ; then
				NET_SERVICES[N]="$X"
				NET[N]="connmenu connmanctl connect $X" 
				LABEL[N]="${ESSIDS[N]}"
				A="#"
			#	break
			fi
		done
		for Y in "${UNSECURE[@]}" ; do
			if [[ $X == $Y && -z $A ]] ; then
				NET_SERVICES[N]="$X"
				NET[N]="connmanctl connect $X"
				LABEL[N]="${ESSIDS[N]}"
				A="#"
			fi
		done
		(( N++ ))
	done
	###### Generate menu section for network availables. ######
	echo "<openbox_pipe_menu>"
#	if [[ -n ${ESSIDS[0]} ]] && (( EXIT = 0 )) ; then
		X=0
		for NET_NAME in "${ESSIDS[@]}"	; do
			N=0 ; YN=N
			echo -e "\t<item label=\"$NET_NAME\">"
			echo -e "\t\t<action name=\"Execute\">"
			echo -e "\t\t\t<command>"${NET[X]}"</command>"
			echo -e "\t\t</action>"
			echo -e "\t</item>"
			(( X++ ))
		done
#	else 
#		echo -e "\t<separator label=\"No Networks Found\"/>"	
#	fi
	echo "</openbox_pipe_menu>"
exit 0
}
###############################################################################
f_netmenu() {
echo "<openbox_pipe_menu>"
	echo -e "<separator label=\"ConnMan\"/>"
	echo -e "\t<menu execute=\"connmenu --tech\" id=\"techpipe\" label=\"Interface\"/>"
#Scan button
	echo -e "\t<item label=\"Scan\">"
	echo -e "\t\t<action name=\"Execute\">"
	echo -e "\t\t\t<command>connmanctl scan wifi</command>"
	echo -e "\t\t</action>"
	echo -e "\t</item>"
	echo -e "\t<separator/>"
#Networks selection second pipe-menu
	echo -e "\t<menu execute=\"connmenu --essids\" id=\"essidpipe\" label=\"Networks\"/>"
echo "</openbox_pipe_menu>"
exit 0
}
#No need for a manual loop case statement for processing positional parameters here
#as only the bottom condition has to process above $1 and that is strait forward.
#see the function f_exec_xdialog
[[ $1 == --main-menu ]] && f_netmenu 
[[ $1 == --admin ]] && f_admin_opts 
[[ $1 ==	--essids ]] && f_networks 
[[ $1 ==	--tech ]] && f_technologies 
[[ $1	==	--help ]] && f_helpdoc 
[[ $1	==	connmanctl ]] && f_exec_xdialog 


